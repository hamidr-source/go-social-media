// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: post.sql

package db

import (
	"context"
)

const createPost = `-- name: CreatePost :one
INSERT INTO "post" (
  title,
  body,
  author
) VALUES (
  $1, $2, $3
) RETURNING id, title, body, author, created_at
`

type CreatePostParams struct {
	Title  string `json:"title"`
	Body   string `json:"body"`
	Author int32  `json:"author"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.Title, arg.Body, arg.Author)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.Author,
		&i.CreatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM "post"
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, title, body, author, created_at FROM "post"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.Author,
		&i.CreatedAt,
	)
	return i, err
}

const listPost = `-- name: ListPost :many
SELECT id, title, body, author, created_at FROM "post"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPostParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPost(ctx context.Context, arg ListPostParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPost, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.Author,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :exec
UPDATE "post"
SET body = $2
WHERE id = $1
`

type UpdatePostParams struct {
	ID   int32  `json:"id"`
	Body string `json:"body"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) error {
	_, err := q.db.ExecContext(ctx, updatePost, arg.ID, arg.Body)
	return err
}
